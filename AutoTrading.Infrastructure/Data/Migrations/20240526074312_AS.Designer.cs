// <auto-generated />
using System;
using AutoTrading.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoTrading.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240526074312_AS")]
    partial class AS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoTrading.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("계좌번호");

                    b.Property<int>("AccountTypeCode")
                        .HasMaxLength(5)
                        .HasColumnType("integer")
                        .HasComment("[14] 계좌 종류");

                    b.Property<int>("CurrentAmount")
                        .HasColumnType("integer")
                        .HasComment("현재 계좌 평가금액");

                    b.Property<int>("CurrentCurrency")
                        .HasColumnType("integer")
                        .HasComment("현재 현금 보유");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasComment("사용가능여부");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("특이사항");

                    b.Property<int>("StockFirmCode")
                        .HasMaxLength(5)
                        .HasColumnType("integer")
                        .HasComment("[13] 증권사 이름");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.AccountDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("메모");

                    b.Property<int>("Profit")
                        .HasColumnType("integer")
                        .HasComment("수익");

                    b.Property<DateTime?>("PurchasedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasComment("구매 시간");

                    b.Property<int>("PurchasedPrice")
                        .HasColumnType("integer")
                        .HasComment("개당 구매 가격");

                    b.Property<int>("PurchasedQuantity")
                        .HasColumnType("integer")
                        .HasComment("구매 수량");

                    b.Property<DateTime?>("SoldAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("판매 시각");

                    b.Property<int>("SoldPrice")
                        .HasColumnType("integer")
                        .HasComment("개당 판매 가격");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("integer")
                        .HasComment("판매 수량");

                    b.Property<long>("StockId")
                        .HasColumnType("bigint");

                    b.Property<int>("TradeCode")
                        .HasMaxLength(5)
                        .HasColumnType("integer")
                        .HasComment("[15] 매매 구분");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StockId");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<int>("CodeCategoryId")
                        .HasColumnType("integer")
                        .HasComment("코드 카테고리 ID");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("사용 여부");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("설명");

                    b.HasKey("CodeId");

                    b.HasIndex("CodeCategoryId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.CodeCategory", b =>
                {
                    b.Property<int>("CodeCategoryId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("")
                        .HasComment("코드 카테고리 설명");

                    b.HasKey("CodeCategoryId");

                    b.ToTable("CodeCategories");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasComment("자동매매 포함 여부");

                    b.Property<int>("LocationCode")
                        .HasMaxLength(5)
                        .HasColumnType("integer")
                        .HasComment("[12] 주식 상장 위치(코스피, 코스닥)");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("")
                        .HasComment("특이사항");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("주식 이름");

                    b.Property<int>("NationalityCode")
                        .HasMaxLength(5)
                        .HasColumnType("integer")
                        .HasComment("[11] 주식 상장 국가");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("거래를 위한 상품코드");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LastLoggedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Account", b =>
                {
                    b.HasOne("AutoTrading.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.AccountDetail", b =>
                {
                    b.HasOne("AutoTrading.Domain.Entities.Account", "Account")
                        .WithMany("AccountDetails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoTrading.Domain.Entities.Stock", "Stock")
                        .WithMany("AccountDetails")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Code", b =>
                {
                    b.HasOne("AutoTrading.Domain.Entities.CodeCategory", "CodeCategory")
                        .WithMany("Codes")
                        .HasForeignKey("CodeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeCategory");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AutoTrading.Domain.Entities.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoTrading.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.CodeCategory", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.Stock", b =>
                {
                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("AutoTrading.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
